//
//  ViewController.m
//  MKMapView
//
//  Created by Admin on 10.11.16.
//  Copyright Â© 2016 Ehlakov Victor. All rights reserved.
//

#import "ViewController.h"
#import <MapKit/MapKit.h>
#import "EVAStudent.h"
#import "EVAMKAnnotation.h"
#import "EVAAnnotationMeeting.h"
#import "EVAPopoverViewController.h"
#import "UIView+MKAnnotationView.h"
#import "EVAInfoView.h"
@interface ViewController () <MKMapViewDelegate, UIPopoverControllerDelegate>
@property (strong, nonatomic) NSMutableArray *arrayOfStudents;
@property (strong, nonatomic) UIPopoverController *popover;
@property (strong, nonatomic) EVAMKAnnotation *studentAnnotation;
@property (strong, nonatomic) MKAnnotationView *myAnnotationView;
@property (strong, nonatomic) EVAInfoView *infoView;
@property (strong, nonatomic) MKDirections *directions;
@property (strong, nonatomic) EVAAnnotationMeeting *meeting;
@end

@implementation ViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    EVAInfoView *info = [[EVAInfoView alloc]initWithFrame:CGRectMake(0, 0, 200, 100)];// (30, 90, 200, 100)];
    
    self.infoView = info;
    
    [self.ibMapView addSubview:self.infoView];

    // Do any additional setup after loading the view, typically from a nib.
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

-(void) dealloc{
    if ([self.directions isCalculating]) {
        [self.directions cancel];
    }
}
#pragma mark - PrivateMethods
- (NSArray *)countStudentInCircleCoordinate:(CLLocationCoordinate2D)location forRadius:(int)radius {
    
    CLLocation *startLocation = [[CLLocation alloc]initWithLatitude:location.latitude longitude:location.longitude];
    
    int count = 0;
    
    NSMutableArray *tempArray = [[NSMutableArray alloc]init];
    
    for (id <MKAnnotation> annotation in self.ibMapView.annotations) {
        
        if ([annotation isKindOfClass:[EVAMKAnnotation class]]) {
            
            CLLocation *tempLocation = [[CLLocation alloc]initWithLatitude:annotation.coordinate.latitude longitude:annotation.coordinate.longitude];
            
            CLLocationDistance dist = [startLocation distanceFromLocation:tempLocation];
            
            if (radius > dist) {
                count++;
                [tempArray addObject:annotation];
            }
            
        }
        
    }
    
    if (radius == 150000) {
        self.infoView.infoLabel1.text = [NSString stringWithFormat:@"radius %d student %d",radius,count];
    } else if (radius == 300000) {
        self.infoView.infoLabel2.text = [NSString stringWithFormat:@"radius %d student %d",radius,count];
    } else if (radius == 450000) {
        self.infoView.infoLabel3.text = [NSString stringWithFormat:@"radius %d student %d",radius,count];
    }
    
    return tempArray;
}

-(void) addRouteForAnotationCoordinate:(CLLocationCoordinate2D)endCoordinate startCoordinate:(CLLocationCoordinate2D)startCoordinate {
    
    MKDirectionsRequest* request = [[MKDirectionsRequest alloc] init];
    
    MKPlacemark* startPlacemark = [[MKPlacemark alloc] initWithCoordinate:startCoordinate
                                                        addressDictionary:nil];
    
    MKMapItem* startDestination = [[MKMapItem alloc] initWithPlacemark:startPlacemark];
    
    request.source = startDestination;
    
    MKPlacemark* endPlacemark = [[MKPlacemark alloc] initWithCoordinate:endCoordinate
                                                      addressDictionary:nil];
    
    MKMapItem* endDestination = [[MKMapItem alloc] initWithPlacemark:endPlacemark];
    
    request.destination = endDestination;
    request.transportType = MKDirectionsTransportTypeAutomobile;
    request.requestsAlternateRoutes = YES;
    
    self.directions = [[MKDirections alloc] initWithRequest:request];
    
    [self.directions calculateDirectionsWithCompletionHandler:^(MKDirectionsResponse *response, NSError *error) {
        
        if (error) {
            
        } else if ([response.routes count] == 0) {
            
        } else {
            NSMutableArray *array = [NSMutableArray array];
            for (MKRoute *route in response.routes){
                [array addObject:route.polyline];
            }
            [self.ibMapView addOverlays:array level:MKOverlayLevelAboveRoads];
        }
    }];
    
}


-(void) drawCircle:(EVAAnnotationMeeting*) annotation{
    
    MKCircle *circle1 = [MKCircle circleWithCenterCoordinate:annotation.coordinate radius:450000];
    MKCircle *circle2 = [MKCircle circleWithCenterCoordinate:annotation.coordinate radius:300000];
    MKCircle *circle3 = [MKCircle circleWithCenterCoordinate:annotation.coordinate radius:150000];

    [self countStudentInCircleCoordinate:annotation.coordinate forRadius:450000];
    [self countStudentInCircleCoordinate:annotation.coordinate forRadius:300000];
    [self countStudentInCircleCoordinate:annotation.coordinate forRadius:150000];

    [self.ibMapView addOverlays:@[circle1, circle2, circle3]];
    
}
-(void) showConroller:(UIViewController*) vc inPopoverFromSender:(UIButton*) sender{
    
    if (!sender) {
        return;
    }
    vc.preferredContentSize = CGSizeMake(300, 300);
    UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:vc];
    popover.delegate = self;
    self.popover = popover;
    
    [popover presentPopoverFromRect:[(UIButton*)sender frame] inView:self.view permittedArrowDirections:UIPopoverArrowDirectionDown animated:YES];
    
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(3 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        [self dismissViewControllerAnimated:YES completion:NO];
    });

}
-(void) showConrollerAsModal:(UIViewController*) vc{
    
    [self presentViewController:vc animated:YES completion:^{
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            [self dismissViewControllerAnimated:YES completion:nil];
        });
    }];
    
}

-(void) showDescription:(UIButton*) sender{
    
    MKAnnotationView *an = [sender superAnnoatationView];
    EVAStudent *student = [(EVAMKAnnotation*)an.annotation student];
    
    EVAPopoverViewController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"PopoverViewController"];
    vc.student = student;
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        [self showConroller:vc inPopoverFromSender:sender];
    } else {
        [self showConrollerAsModal:vc];
    }
    
}
-(void) createStudents:(CLLocationCoordinate2D) coordinate{
    
    for (int i = 0; i < 25; i++) {
        EVAStudent *student = [[EVAStudent alloc] init];
        student.firstName = [student randomString];
        student.lastName = [student randomString];
        student.location = [student randomLocation:coordinate];
        student.gender = [student randomGender];
        [self.arrayOfStudents addObject:student];
    }
    
}

#pragma mark - Actions
- (IBAction)actionSearch:(UIBarButtonItem *)sender {
    
    MKMapRect zoomRect = MKMapRectNull;
    for (id <MKAnnotation> annotation in self.ibMapView.annotations) {
        CLLocationCoordinate2D location = annotation.coordinate;
        MKMapPoint center = MKMapPointForCoordinate(location);
        static double delta = 10000;
        MKMapRect rect = MKMapRectMake(center.x-delta, center.y-delta, delta*2, delta*2);
        zoomRect = MKMapRectUnion(zoomRect, rect);
    }
    zoomRect = [self.ibMapView mapRectThatFits:zoomRect];
    [self.ibMapView setVisibleMapRect:zoomRect edgePadding:UIEdgeInsetsMake(50, 50, 50, 50) animated:YES];
    
}

- (IBAction)actionAddStudents:(UIBarButtonItem *)sender {
    
    for (EVAStudent *std in self.arrayOfStudents) {
        EVAStudent* student = std;
        EVAMKAnnotation* annotation = [[EVAMKAnnotation alloc] initWithStudent:student];
        [self.ibMapView addAnnotation:annotation];
    }
    
}

- (IBAction)actionAdd:(UIBarButtonItem *)sender {
    
    self.arrayOfStudents = [[NSMutableArray alloc] init];
    EVAStudent *student = [[EVAStudent alloc] init];
    student.firstName = @"My location";
    student.lastName = @"Victor";
    student.location = self.ibMapView.region.center;
    student.gender = Men;
    [self.arrayOfStudents addObject:student];

    EVAMKAnnotation *annotation = [[EVAMKAnnotation alloc] initWithStudent:student];

    [self.ibMapView addAnnotation:annotation];
    
    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0);
    dispatch_async(queue, ^{
        [self createStudents:annotation.coordinate];
    });
    
}

- (IBAction)actionAddMeeting:(UIBarButtonItem *)sender {
    
    EVAStudent *student = [[EVAStudent alloc] init];
    CLLocationCoordinate2D location = [student randomLocation:self.ibMapView.region.center];
    EVAAnnotationMeeting *meeting = [[EVAAnnotationMeeting alloc] initWithNameMeeting:@"Meetimg"
                                                                        andCLLocation:location];
    self.meeting = meeting;
    [self.ibMapView addAnnotation:self.meeting];
    
    [self drawCircle:self.meeting];
    
}

- (IBAction)actionDrawRoute:(UIBarButtonItem *)sender {
    
    if ([self.directions isCalculating]) {
        [self.directions cancel];
    }

    for (id <MKAnnotation> obj in [self countStudentInCircleCoordinate:self.meeting.coordinate forRadius:450000]) {
        
        [self addRouteForAnotationCoordinate:[obj coordinate] startCoordinate:self.meeting.coordinate];
        
    }
    
}

#pragma mark - UIPopoverControllerDelegate
-(void) popoverControllerDidDismissPopover:(UIPopoverController *)popoverController{
    self.popover = nil;
}
#pragma mark - MKMapViewDelegate
- (nullable MKAnnotationView *)mapView:(MKMapView *)mapView viewForAnnotation:(id <MKAnnotation>)annotation{
 
    if ([annotation isKindOfClass:[MKUserLocation class]]) {
        return nil;
    }
    
    if ([annotation isKindOfClass:[EVAMKAnnotation class]]) {
        
        static NSString* identifier = @"StudentAnnotation";
        
        MKAnnotationView* studentAnnotation = (MKAnnotationView*)[mapView dequeueReusableAnnotationViewWithIdentifier:identifier];
        
        if (!studentAnnotation) {
            studentAnnotation = [[MKAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:identifier];
            
            studentAnnotation.canShowCallout = YES;
            studentAnnotation.draggable = NO;
            
            UIButton* descriptionButton = [UIButton buttonWithType:UIButtonTypeDetailDisclosure];
            [descriptionButton addTarget:self
                                  action:@selector(showDescription:)
                        forControlEvents:UIControlEventTouchUpInside];
            
            studentAnnotation.rightCalloutAccessoryView = descriptionButton;
            self.myAnnotationView = studentAnnotation;
        } else {
            studentAnnotation.annotation = annotation;
        }
        
        EVAStudent* student = [(EVAMKAnnotation*)annotation student];
       
        if (student.gender == Men) {
            studentAnnotation.image = [UIImage imageNamed:@"men.png"];
        }else if (student.gender == Women){
            studentAnnotation.image = [UIImage imageNamed:@"women.png"];
        }
        return studentAnnotation;
        
    }
    else if ([annotation isKindOfClass:[EVAAnnotationMeeting class]]){
        static NSString* identifier = @"MeetingAnnotation";
        
        MKAnnotationView* meetingAnnotation = (MKAnnotationView*)[mapView dequeueReusableAnnotationViewWithIdentifier:identifier];
        
        if (!meetingAnnotation) {
            meetingAnnotation = [[MKAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:identifier];
            
            meetingAnnotation.canShowCallout = YES;
            meetingAnnotation.draggable = YES;
            meetingAnnotation.image = [UIImage imageNamed:@"meeting.png"];
            self.myAnnotationView = meetingAnnotation;
        } else {
            meetingAnnotation.annotation = annotation;
        }
        
        return meetingAnnotation;

    }
    return nil;

}

- (void)mapView:(MKMapView *)mapView annotationView:(MKAnnotationView *)view didChangeDragState:(MKAnnotationViewDragState)newState
   fromOldState:(MKAnnotationViewDragState)oldState{
    
    if ([self.myAnnotationView isKindOfClass:[EVAMKAnnotation class]]) {
        
    EVAMKAnnotation *annotationNew = view.annotation;
    [self createStudents:annotationNew.coordinate];
        
    }else {
        
        EVAAnnotationMeeting *annotationNew = view.annotation;
        [self.ibMapView removeOverlays:mapView.overlays];
        [self drawCircle:annotationNew];
        
    }
}

 - (MKOverlayRenderer *)mapView:(MKMapView *)mapView rendererForOverlay:(id <MKOverlay>)overlay {
     
     if ([overlay isKindOfClass:[MKCircle class]]) {
         
         MKCircleRenderer *circleRenderer = [[MKCircleRenderer alloc] initWithCircle:(MKCircle *)overlay];
         circleRenderer.strokeColor = [UIColor greenColor];
         circleRenderer.lineWidth = 3.f;
         return circleRenderer;
         
     }
     if ([overlay isKindOfClass:[MKPolyline class]]) {
         
         MKPolylineRenderer* lineRenderer = [[MKPolylineRenderer alloc] initWithOverlay:overlay];
         lineRenderer.lineWidth = 3.f;
         lineRenderer.strokeColor = [UIColor redColor];
         return lineRenderer;
         
     }
     
     return nil;

 }


#pragma mark - TheTask
/*
 Ð£ÑÐµÐ½Ð¸Ðº.
 
 1. Ð¡Ð¾Ð·Ð´Ð°Ð¹ÑÐµ Ð¼Ð°ÑÑÐ¸Ð² Ð¸Ð· 10 - 30 ÑÐ°Ð½Ð´Ð¾Ð¼Ð½ÑÑ ÑÑÑÐ´ÐµÐ½ÑÐ¾Ð², Ð¿ÑÑÐ¼Ð¾ ÐºÐ°Ðº ÑÐ°Ð½ÑÑÐµ, ÑÐ¾Ð»ÑÐºÐ¾ Ð² ÑÑÐ¾Ñ ÑÐ°Ð· Ð¿ÑÑÑÑ Ñ Ð½Ð¸Ñ Ð½Ð°ÑÑÐ´Ñ Ñ Ð¸Ð¼ÐµÐ½ÐµÐ¼ Ð¸ ÑÐ°Ð¼Ð¸Ð»Ð¸ÐµÐ¹ Ð±ÑÐ´ÐµÑ ÐµÑÐµ Ð¸ ÐºÐ¾Ð¾ÑÐ´Ð¸Ð½Ð°ÑÐ°. ÐÐ¾Ð¶ÐµÑÐµ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ ÑÑÑÑÐºÑÑÑÑ ÐºÐ¾Ð¾ÑÐ´Ð¸Ð½Ð°ÑÑ, Ð° Ð¼Ð¾Ð¶ÐµÑÐµ Ð¿ÑÐ¾ÑÑÐ¾ Ð´Ð²Ð° Ð´Ð°Ð±Ð»Ð° - Ð»Ð¾Ð½Ð³Ð¸ÑÑÐ´ Ð¸ Ð»Ð°ÑÐ¸ÑÑÐ´.
 
 2. ÐÐ¾Ð¾ÑÐ´Ð¸Ð½Ð°ÑÑ Ð³ÐµÐ½ÐµÑÐ¸ÑÑÐ¹ÑÐµ ÑÐ°Ðº, ÑÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÐµ ÑÐµÐ½ÑÑ Ð½Ð°Ð¿ÑÐ¸Ð¼ÐµÑ Ð² Ð²Ð°ÑÐµÐ¼ Ð³Ð¾ÑÐ¾Ð´Ðµ Ð¸ Ð¿ÑÐ¾ÑÑÐ¾ Ð³ÐµÐ½ÐµÑÐ¸ÑÑÐ¹ÑÐµ Ð½ÐµÐ±Ð¾Ð»ÑÑÐ¸Ðµ Ð¾ÑÑÐ¸ÑÐ°ÑÐµÐ»ÑÐ½ÑÐµ Ð»Ð¸Ð±Ð¾ Ð¿Ð¾Ð»Ð¾Ð¶Ð¸ÑÐµÐ»ÑÐ½ÑÐµ ÑÐ¸ÑÐ»Ð°, ÑÑÐ¾Ð±Ñ ÑÐ°Ð½Ð´Ð¾Ð¼Ð½Ð¾ Ð¿Ð¾Ð»ÑÑÐ°Ð»Ð°ÑÑ ÐºÐ¾Ð¾ÑÐ´Ð¸Ð½Ð°ÑÐ° Ð¾Ñ ÑÐµÐ½ÑÑÐ° Ð² Ð¿ÑÐµÐ´ÐµÐ»Ð°Ñ ÑÑÑÐ°Ð½Ð¾Ð²Ð»ÐµÐ½Ð½Ð¾Ð³Ð¾ ÑÐ°Ð´Ð¸ÑÑÐ°.
 
 (ÐÑ Ð° ÐµÑÐ»Ð¸ ÑÐ¾Ð²ÑÐµÐ¼ Ð½Ðµ Ð¿Ð¾Ð»ÑÑÐ°ÐµÑÑÑ Ð³ÐµÐ½ÐµÑÐ¸ÑÐ¾Ð²Ð°ÑÑ ÐºÐ¾Ð¾ÑÐ´Ð¸Ð½Ð°ÑÑ, ÑÐ¾ Ð¿ÑÐ¾ÑÑÐ¾ ÑÑÐ°Ð²ÑÑÐµ Ð¸Ð¼ Ð·Ð°Ð³Ð¾ÑÐ¾Ð²Ð»ÐµÐ½Ð½ÑÐµ ÐºÐ¾Ð¾ÑÐ´Ð¸Ð½Ð°ÑÑ - ÑÑÐ¾ Ð½Ðµ Ð³Ð»Ð°Ð²Ð½Ð¾Ðµ)
 
 3. ÐÐ¾ÑÐ»Ðµ ÑÐ¾Ð³Ð¾, ÐºÐ°Ðº Ð²Ñ ÑÐ³ÐµÐ½ÐµÑÐ¸ÑÐ¾Ð²Ð°Ð»Ð¸ ÑÐ²Ð¾Ð¸Ñ ÑÑÑÐ´ÐµÐ½ÑÐ¾Ð², Ð¿Ð¾ÐºÐ°Ð¶Ð¸ÑÐµ Ð¸Ñ Ð²ÑÐµÑ Ð½Ð° ÐºÐ°ÑÑÐµ, Ð¿ÑÐ¸ÑÐµÐ¼ Ð² ÑÐ¸ÑÑÐ»Ðµ Ð¿ÑÑÑÑ Ð±ÑÐ´ÐµÑ ÐÐ¼Ñ Ð¸ Ð¤Ð°Ð¼Ð¸Ð»Ð¸Ñ Ð° Ð² ÑÐ°Ð±ÑÐ¸ÑÑÐ»Ðµ Ð³Ð¾Ð´ ÑÐ¾Ð¶Ð´ÐµÐ½Ð¸Ñ. ÐÐ¾Ð¶ÐµÑÐµ Ð´Ð»Ñ ÐºÐ°Ð¶Ð´Ð¾Ð³Ð¾ ÑÑÑÐ´ÐµÐ½ÑÐ° ÑÐ¾Ð·Ð´Ð°ÑÑ ÑÐ²Ð¾Ñ Ð°Ð½Ð½Ð¾ÑÐ°ÑÐ¸Ñ, Ð° Ð¼Ð¾Ð¶ÐµÑÐµ ÑÑÑÐ´ÐµÐ½ÑÐ¾Ð² Ð¿Ð¾Ð´Ð¿Ð¸ÑÐ°ÑÑ Ð½Ð° Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð» Ð°Ð½Ð½Ð¾ÑÐ°ÑÐ¸Ð¹ Ð¸ Ð´Ð¾Ð±Ð°Ð²Ð¸ÑÑ Ð¸Ñ Ð½Ð° ÐºÐ°ÑÑÑ Ð½Ð°Ð¿ÑÑÐ¼ÑÑ - ÐºÐ°Ðº ÑÐ¾ÑÐ¸ÑÐµ :)
 +
 Ð¡ÑÑÐ´ÐµÐ½Ñ.
 
 4. ÐÐ¾Ð±Ð°Ð²ÑÑÐµ ÐºÐ½Ð¾Ð¿Ð¾ÑÐºÑ, ÐºÐ¾ÑÐ¾ÑÐ°Ñ Ð¿Ð¾ÐºÐ°Ð¶ÐµÑ Ð²ÑÐµÑ ÑÑÑÐ´ÐµÐ½ÑÐ¾Ð² Ð½Ð° ÑÐºÑÐ°Ð½Ðµ.+
 
 5. ÐÐ¼ÐµÑÑÐ¾ Ð¿Ð¸Ð½Ð¾Ð² Ð½Ð° ÐºÐ°ÑÑÐµ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐ¹ÑÐµ ÑÐ²Ð¾Ð¸ ÐºÐ°ÑÑÐ¾Ð¼Ð½ÑÐµ ÐºÐ°ÑÑÐ¸Ð½ÐºÐ¸, Ð¿ÑÐ¸ÑÐµÐ¼ ÐµÑÐ»Ð¸ ÑÑÑÐ´ÐµÐ½Ñ Ð¼ÑÐ¶ÑÐºÐ¾Ð³Ð¾ Ð¿Ð¾Ð»Ð°, ÑÐ¾ ÐºÐ°ÑÑÐ¸Ð½ÐºÐ° Ð´Ð¾Ð»Ð¶Ð½Ð° Ð±ÑÑÑ Ð¾Ð´Ð½Ð°, Ð° Ð´Ð»Ñ Ð´ÐµÐ²ÑÑÐµÐº Ð´ÑÑÐ³Ð°Ñ.+
 +
 ÐÐ°ÑÑÐµÑ
 
 6. Ð£ ÐºÐ°Ð¶Ð´Ð¾Ð³Ð¾ ÐºÐ¾Ð»Ð°ÑÑÐ° (ÑÑÐ¾Ð³Ð¾ Ð¾Ð±Ð»Ð°ÑÐºÐ° Ð½Ð°Ð´ Ð¿Ð¸Ð½Ð¾Ð¼) ÑÐ´ÐµÐ»Ð°Ð¹ÑÐµ ÐºÐ½Ð¾Ð¿Ð¾ÑÐºÑ Ð¸Ð½ÑÐ¾ÑÐ¼Ð°ÑÐ¸Ð¸ ÑÐ¿ÑÐ°Ð²Ð° ÑÐ°Ðº, ÑÑÐ¾ ÐºÐ¾Ð³Ð´Ð° Ñ Ð½Ð° Ð½ÐµÐµ Ð½Ð°Ð¶Ð¸Ð¼Ð°Ñ Ð²ÑÐ»Ð°Ð·Ð¸Ñ Ð¿Ð¾Ð¿Ð¾Ð²ÐµÑ, Ð² ÐºÐ¾ÑÐ¾ÑÐ¾Ð¼ Ð² Ð²Ð¸Ð´Ðµ ÑÑÐ°ÑÐ¸ÑÐµÑÐºÐ¾Ð¹ ÑÐ°Ð±Ð»Ð¸ÑÑ Ð½Ð°ÑÐ¾Ð´Ð¸ÑÑÑ Ð¸Ð¼Ñ Ð¸ ÑÐ°Ð¼Ð¸Ð»Ð¸Ñ ÑÑÑÐ´ÐµÐ½ÑÐ°, Ð³Ð¾Ð´ ÑÐ¾Ð¶Ð´ÐµÐ½Ð¸Ñ, Ð¿Ð¾Ð» Ð¸ ÑÐ°Ð¼Ð¾Ðµ Ð³Ð»Ð°Ð²Ð½Ð¾Ðµ Ð°Ð´ÑÐµÑ.
 
 7. Ð ÑÐ»ÑÑÐ°Ðµ ÐµÑÐ»Ð¸ ÑÑÐ¾ ÑÐµÐ»ÐµÑÐ¾Ð½, ÑÐ¾ Ð²Ð¼ÐµÑÑÐ¾ Ð¿Ð¾Ð¿Ð¾Ð²ÐµÑÐ° ÐºÐ¾Ð½ÑÑÐ¾Ð»Ð»ÐµÑ Ð´Ð¾Ð»Ð¶ÐµÐ½ Ð²ÑÐ»Ð°Ð·Ð¸ÑÑ Ð¼Ð¾Ð´Ð°Ð»ÑÐ½Ð¾.
 +
 Ð¡ÑÐ¿ÐµÑÐ¼ÐµÐ½
 
 8. Ð¡Ð¾Ð·Ð´Ð°Ð¹ÑÐµ Ð°Ð½Ð½Ð¾ÑÐ°ÑÐ¸Ñ Ð´Ð»Ñ Ð¼ÐµÑÑÐ° Ð²ÑÑÑÐµÑÐ¸ Ð¸ Ð¿Ð¾ÐºÐ°Ð·ÑÐ²Ð°Ð¹ÑÐµ ÐµÐ³Ð¾ Ð½Ð° ÐºÐ°ÑÑÐµ Ð½Ð¾Ð²ÑÐ¼Ð¾Ð¹ ÑÐ¾Ð¾ÑÐ²ÐµÑÑÑÐ²ÑÑÑÐµÐ¹ ÐºÐ°ÑÑÐ¸Ð½ÐºÐ¾Ð¹+
 
 9. ÐÐµÑÑÐ¾ Ð²ÑÑÑÐµÑÐ¸ Ð¼Ð¾Ð¶Ð½Ð¾ Ð¿ÐµÑÐµÐ¼ÐµÑÐ°ÑÑ Ð¿Ð¾ ÐºÐ°ÑÑÐµ, Ð° ÑÑÑÐ´ÐµÐ½ÑÐ¾Ð² Ð½ÐµÑ+
 
 10. ÐÐ¾Ð³Ð´Ð° Ð¼ÐµÑÑÐ¾ Ð²ÑÑÑÐµÑÐ¸ Ð±ÑÐ¾ÑÐ°ÐµÑÑÑ Ð½Ð° ÐºÐ°ÑÑÑ, ÑÐ¾ Ð²Ð¾ÐºÑÑÐ³ Ð½ÐµÐ³Ð¾ Ð½Ð°Ð´Ð¾ ÑÐ¸ÑÐ¾Ð²Ð°ÑÑ 3 ÐºÑÑÐ³Ð°, Ñ ÑÐ°Ð´Ð¸ÑÑÐ°Ð¼Ð¸ 5 ÐºÐ¼, 10 ÐºÐ¼ Ð¸ 15 ÐºÐ¼ (Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐ¹ÑÐµ Ð¾Ð²ÐµÑÐ»ÐµÐ¸)+
 
 11. ÐÐ° ÐºÐ°ÐºÐ¾Ð¹-ÑÐ¾ Ð¿Ð¾Ð»ÑÐ¿ÑÐ¾Ð·ÑÐ°ÑÐ½Ð¾Ð¹ Ð²ÑÑÑÐµ Ð² Ð¾Ð´Ð½Ð¾Ð¼ Ð¸Ð· ÑÐ³Ð»Ð¾Ð² Ð²Ð°Ð¼ Ð½Ð°Ð´Ð¾ Ð¿Ð¾ÐºÐ°Ð·Ð°ÑÑ ÑÐºÐ¾Ð»ÑÐºÐ¾ ÑÑÑÐ´ÐµÐ½ÑÐ¾Ð² Ð¿Ð¾Ð¿Ð°Ð´Ð°ÑÑ Ð² ÐºÐ°ÐºÐ¾Ð¹ ÐºÑÑÐ³. Ð¡ÑÑÑ ÑÐ°ÐºÐ°Ñ, ÑÐµÐ¼ Ð´Ð°Ð»ÑÑÐµ ÑÑÑÐ´ÐµÐ½Ñ Ð¶Ð¸Ð²ÐµÑ, ÑÐµÐ¼ Ð¼ÐµÐ½ÑÑÐµ Ð²ÐµÑÐ¾ÑÑÐ½Ð¾ÑÑÑ ÑÑÐ¾ Ð¾Ð½ Ð¿ÑÐ¸Ð´ÐµÑ Ð½Ð° Ð²ÑÑÑÐµÑÑ. Ð Ð°ÑÑÑÐ¾ÑÐ½Ð¸Ðµ Ð¾Ñ ÑÑÑÐ´ÐµÐ½ÑÐ° Ð´Ð¾ Ð¼ÐµÑÑÐ° Ð²ÑÑÑÐµÑÐ¸ ÑÐ°ÑÑÑÐ¸ÑÑÐ²Ð°Ð¹ÑÐµ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÑ ÑÑÐ½ÐºÑÐ¸Ñ Ð´Ð»Ñ ÑÐ°ÑÑÐµÑÐ° ÑÐ°ÑÑÑÐ¾ÑÐ½Ð¸Ñ Ð¼ÐµÐ¶Ð´Ñ ÑÐ¾ÑÐºÐ°Ð¼Ð¸, Ð¿Ð¾Ð¸ÑÐ¸ÑÐµ ÐµÐµ Ð² ÑÑÐµÐ¹Ð¼Ð²Ð¾ÑÐºÐµ :)
 +
 12. Ð¡Ð´ÐµÐ»Ð°Ð¹ÑÐµ Ð½Ð° Ð½Ð°Ð²Ð¸Ð³ÐµÐ¹ÑÐ¸Ð½Ðµ ÐºÐ½Ð¾Ð¿Ð¾ÑÐºÑ, Ð¿Ð¾ Ð½Ð°Ð¶Ð°ÑÐ¸Ñ Ð½Ð° ÐºÐ¾ÑÐ¾ÑÑÑ, Ð¾Ñ ÑÐ°Ð½Ð´Ð¾Ð¼Ð½ÑÑ ÑÑÑÐ´ÐµÐ½ÑÐ¾Ð² Ð´Ð¾ Ð½ÐµÐµ Ð±ÑÐ´ÑÑ Ð¿ÑÐ¾Ð»Ð¾Ð¶ÐµÐ½Ñ Ð¼Ð°ÑÑÑÑÑÑ (ÑÐ¸Ð¿Ð¾ ÑÑÑÐ´ÐµÐ½ÑÑ Ð¸Ð´ÑÑ Ð½Ð° ÑÑÐ¾Ð´ÐºÑ), Ð¿ÑÐ¸ÑÐ¾Ð¼ Ð²ÐµÑÐ¾ÑÑÐ½Ð¾ÑÑÐ¸ Ð³ÐµÐ½ÐµÑÐ°ÑÐ¾ÑÐ° ÑÐ°Ð·Ð½ÑÐµ, Ð·Ð°Ð²Ð¸ÑÐ¸Ñ Ð¾Ñ ÐºÑÑÐ³Ð°, Ð² ÐºÐ¾ÑÐ¾ÑÐ¾Ð¼ Ð¾Ð½Ð¸ Ð½Ð°ÑÐ¾Ð´ÑÑÑÑ, ÐµÑÐ»Ð¸ Ð¾Ð½ Ð±Ð»Ð¸Ð·ÐºÐ¾, ÑÐ¾ 90%, Ð° ÐµÑÐ»Ð¸ Ð´Ð°Ð»ÐµÐºÐ¾ - ÑÐ¾ 10%+
 */

@end
